"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Sale`."""
  sales(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sale`."""
    orderBy: [SalesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SaleCondition
  ): SalesConnection
  sale(id: BigInt!): Sale

  """Reads a single `Sale` using its globally unique `ID`."""
  saleByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sale`."""
    nodeId: ID!
  ): Sale
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Sale` values."""
type SalesConnection {
  """A list of `Sale` objects."""
  nodes: [Sale]!

  """
  A list of edges which contains the `Sale` and cursor to aid in pagination.
  """
  edges: [SalesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sale` you could get from the connection."""
  totalCount: Int!
}

"""Sale"""
type Sale implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  createdAt: Datetime
  transactionHash: String
  sellerAddress: String
  buyerAddress: String
  nftTokenId: String
  nftCollectionAddress: String
  quantitySold: Int
  amountPaid: Float
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A `Sale` edge in the connection."""
type SalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sale` at the end of the edge."""
  node: Sale
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Sale`."""
enum SalesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  SELLER_ADDRESS_ASC
  SELLER_ADDRESS_DESC
  BUYER_ADDRESS_ASC
  BUYER_ADDRESS_DESC
  NFT_TOKEN_ID_ASC
  NFT_TOKEN_ID_DESC
  NFT_COLLECTION_ADDRESS_ASC
  NFT_COLLECTION_ADDRESS_DESC
  QUANTITY_SOLD_ASC
  QUANTITY_SOLD_DESC
  AMOUNT_PAID_ASC
  AMOUNT_PAID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Sale` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SaleCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `sellerAddress` field."""
  sellerAddress: String

  """Checks for equality with the object’s `buyerAddress` field."""
  buyerAddress: String

  """Checks for equality with the object’s `nftTokenId` field."""
  nftTokenId: String

  """Checks for equality with the object’s `nftCollectionAddress` field."""
  nftCollectionAddress: String

  """Checks for equality with the object’s `quantitySold` field."""
  quantitySold: Int

  """Checks for equality with the object’s `amountPaid` field."""
  amountPaid: Float
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Sale`."""
  createSale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSaleInput!
  ): CreateSalePayload

  """Updates a single `Sale` using its globally unique id and a patch."""
  updateSaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSaleByNodeIdInput!
  ): UpdateSalePayload

  """Updates a single `Sale` using a unique key and a patch."""
  updateSale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSaleInput!
  ): UpdateSalePayload

  """Deletes a single `Sale` using its globally unique id."""
  deleteSaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSaleByNodeIdInput!
  ): DeleteSalePayload

  """Deletes a single `Sale` using a unique key."""
  deleteSale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSaleInput!
  ): DeleteSalePayload
}

"""The output of our create `Sale` mutation."""
type CreateSalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sale` that was created by this mutation."""
  sale: Sale

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Sale`. May be used by Relay 1."""
  saleEdge(
    """The method to use when ordering `Sale`."""
    orderBy: [SalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SalesEdge
}

"""All input for the create `Sale` mutation."""
input CreateSaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sale` to be created by this mutation."""
  sale: SaleInput!
}

"""An input for mutations affecting `Sale`"""
input SaleInput {
  id: BigInt
  createdAt: Datetime
  transactionHash: String
  sellerAddress: String
  buyerAddress: String
  nftTokenId: String
  nftCollectionAddress: String
  quantitySold: Int
  amountPaid: Float
}

"""The output of our update `Sale` mutation."""
type UpdateSalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sale` that was updated by this mutation."""
  sale: Sale

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Sale`. May be used by Relay 1."""
  saleEdge(
    """The method to use when ordering `Sale`."""
    orderBy: [SalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SalesEdge
}

"""All input for the `updateSaleByNodeId` mutation."""
input UpdateSaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sale` being updated.
  """
  patch: SalePatch!
}

"""Represents an update to a `Sale`. Fields that are set will be updated."""
input SalePatch {
  id: BigInt
  createdAt: Datetime
  transactionHash: String
  sellerAddress: String
  buyerAddress: String
  nftTokenId: String
  nftCollectionAddress: String
  quantitySold: Int
  amountPaid: Float
}

"""All input for the `updateSale` mutation."""
input UpdateSaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sale` being updated.
  """
  patch: SalePatch!
  id: BigInt!
}

"""The output of our delete `Sale` mutation."""
type DeleteSalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sale` that was deleted by this mutation."""
  sale: Sale
  deletedSaleNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Sale`. May be used by Relay 1."""
  saleEdge(
    """The method to use when ordering `Sale`."""
    orderBy: [SalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SalesEdge
}

"""All input for the `deleteSaleByNodeId` mutation."""
input DeleteSaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSale` mutation."""
input DeleteSaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}
